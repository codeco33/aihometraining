<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ksmart42.mybatis.mapper.MemberMapper">

	<resultMap type="LoginHistory" id="loginResultMap">
		<result column="login_num"		property="loginNum" />
		<result column="login_id"		property="loginId" />
		<result column="login_date"		property="loginDate" />
		<result column="logout_date"	property="logoutDate" />
		<association property="member" javaType="Member">
			<id 	column="m_id" 		property="memberId"/>
			<result column="m_pw" 		property="memberPw"/>
			<result column="m_level" 	property="memberLevel"/>
			<result column="m_name" 	property="memberName"/>
			<result column="m_addr" 	property="memberAddr"/>
			<result column="m_email"	property="memberEmail"/>
			<result column="m_reg_date"	property="memberRegDate"/>
		</association>
	</resultMap>

	<resultMap type="Member" id="memberResultMap">
		<id 	column="m_id" 		property="memberId"/>
		<result column="m_pw" 		property="memberPw"/>
		<result column="m_level" 	property="memberLevel"/>
		<result column="m_name" 	property="memberName"/>
		<result column="m_addr" 	property="memberAddr"/>
		<result column="m_email" 	property="memberEmail"/>
		<result column="m_reg_date" property="memberRegDate"/>
	</resultMap>
	
	<select id="getLoginHistory1" resultMap="loginResultMap" fetchSize="1000">
		SELECT
		    l.login_num
		   ,l.login_id
		   ,m.m_name
		   ,m.m_level
		   ,m.m_email
		   ,l.login_date
		   ,l.logout_date
		FROM
		   tb_member AS m
		   INNER JOIN 
		   tb_login AS l
		   on
		   m.m_id = l.login_id;
	</select>
	
	<select id="getLoginHistory2" resultType="map" fetchSize="1000">
		SELECT
		    l.login_num			AS loginNum
		   ,l.login_id			AS loginId
		   ,m.m_name			AS memberName
		   ,m.m_level			AS memberLevel
		   ,m.m_email			AS memberEmail
		   ,l.login_date		AS loginDate
		   ,l.logout_date		AS logoutDate
		FROM
		   tb_member AS m
		   INNER JOIN 
		   tb_login AS l
		   on
		   m.m_id = l.login_id;
	</select>
	
	<delete id="removeMember" parameterType="String">
		/* 회원 삭제 */
		DELETE
		FROM
			tb_member
		WHERE
			m_id = #{memberId};
	</delete>
	
	<delete id="removeLoginHistory" parameterType="String">
		/* 회원의 로그인 이력 삭제 */
		DELETE
		FROM
			tb_login
		WHERE
			login_id = #{memberId};
	</delete>
	
	<delete id="removeOrder" parameterType="String">
		/* 구매자가 구매한 구매 이력 삭제 */
		DELETE
			o
		FROM
			tb_order AS o
		WHERE
			o.o_id = #{memberId};
	</delete>
	
	<delete id="removeGoodsBySellerId" parameterType="String">
		/* 판매자가 등록한 상품 삭제 */
		DELETE
		FROM
			tb_goods
		WHERE
			g_seller_id = #{memberId};
	</delete>
	
	<delete id="removeOrderBySellerId" parameterType="String">
		/* 상품코드에 따른 구매이력 삭제 */
		DELETE
			o
		FROM
			tb_goods as g
			INNER JOIN 
			tb_order as o
			ON
			g.g_code = o.o_g_code
		WHERE
			g.g_seller_id = #{memberId};
	</delete>
	
	<update id="modifyMember" parameterType="Member">
		/* 회원정보 수정 */
		UPDATE member 
		<trim prefix="SET" suffixOverrides=",">
			<if test="memberPw != null and memberPw != ''">
				memberPw = #{memberPw},
			</if>
			<if test="memberName != null and memberName != ''">
				memberName = #{memberName},
			</if>
			<if test="memberNickname != null and memberNickname != ''">
				memberNickname = #{memberNickname},
			</if>
			<if test="memberEmail != null and memberEmail != ''">
				m_email = #{memberEmail}
			</if>
			<if test="memberEmail != null and memberEmail != ''">
				m_email = #{memberEmail}
			</if>
			<if test="memberEmail != null and memberEmail != ''">
				m_email = #{memberEmail}
			</if>
			<if test="memberEmail != null and memberEmail != ''">
				m_email = #{memberEmail}
			</if>
		</trim>
		WHERE
			memberEmail = #{memberEmail}; 
	
	</update>

	<select id="getMemberInfoById" parameterType="String" resultMap="memberResultMap">
		/* 회원별 회원정보 조회 */
		SELECT
		    m.memberEmail        
		   ,m.memberName        
		   ,m.memberNickname      
		   ,m.memberNewsAgree      
		   ,m.memberPhone    
		   ,m.memberBirthday      
		   ,m.memberGender  
		   ,m.memberRecommendEmail  
		   ,m.memberFinalPoint  
		FROM
		   member AS m
		WHERE
		   m.memberEmail = #{memberEmail};
		
	</select>

	<select id="isIdCheck" parameterType="String" resultType="boolean">
		/* 회원 아이디 중복 체크 */
		SELECT
			IF(COUNT(1) = 1, 0, 1)
		FROM 
			member AS m
		WHERE 
			m.memberEmail = #{memberEmail};
	</select>

	<select id="getMemberLevelList" resultType="MemberLevel">
	   /* 회원 등급 목록 조회 */
	   SELECT 
			 l.memberLevelCode
			,l.memberLevelName
		FROM 
			memberlevel AS l;
	</select>

	<insert id="addMember" parameterType="Member">
		/* 회원 가입 */
		INSERT INTO member
		( 	 memberEmail
			,memberPw
		)VALUES (
			 #{memberEmail}
			,#{memberPw}
		);
	</insert>
	
	<select id="getMemberList" parameterType="String" resultMap="memberResultMap" fetchSize="1000">
		/* 회원 목록 조회 */
		SELECT 
			 m.memberEmail
			,m.memberLevelCode 
			,m.memberNewsAgree 
			,m.memberRegDate 
			,m.memberName 
			,m.memberPhone
			,m.memberNickname 
			,m.memberBirthday 
			,m.memberGender
			,m.memberRecommendEmail 
			,m.memberFinalPoint
		FROM 
			member AS m;
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKey != null and searchKey != '' and searchValue != ''">
				${searchKey} LIKE CONCAT('%', #{searchValue}, '%')
			</if>
		</trim>;
	</select>
</mapper>